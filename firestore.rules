rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // A user can read their OWN summary document (for the dashboard, subscription status, etc.)
    // A user can UPDATE their summary document ONLY IF they are not changing protected fields
    // like 'subscriptionTier' or 'totalValue'. This allows for future user settings.
    // The backend function, which has admin privileges, bypasses these rules.
    match /user_summaries/{userId} {
      allow get: if request.auth != null && request.auth.uid == userId;

      // This is the key security rule. It allows a user to update their doc
      // in the future (e.g., for profile settings), but PREVENTS them
      // from giving themselves a premium subscription.
      allow update: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.subscriptionTier == resource.data.subscriptionTier;

      // Clients cannot create or delete their own summary docs.
      allow create, delete: if false;
    }

    // A user can manage their own watchlist.
    match /watchlists/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // A user can only access portfolios they own.
    match /portfolios/{portfolioId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // A user can only access positions they own.
    match /positions/{positionId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    // Add this new block for the 'transactions' collection
    match /transactions/{transactionId} {
      // A user can create a transaction if they are logged in.
      // We also check that the userId in the document they are trying to create
      // matches their own auth uid. This is a crucial security step.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // A user can read, update, or delete a transaction ONLY IF they are the owner.
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Price data is public read-only for all clients. Only backend can write.
    match /latest_prices/{symbol} {
      allow read: if true;
      allow write: if false;
    }

    // Locked down collection.
    match /test_writes/{documentId} {
      allow read, write: if false;
    }
  }
}